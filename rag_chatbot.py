# -*- coding: utf-8 -*-
"""RAG_ChatBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g-LORscM_0jvzgNPKTCy11ckoOZuvv-K
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture --no-stderr
# %pip install --upgrade --quiet lanchain-community langchainhub langchain-chroma beautifulsoup4
# !pip install -q langchain_google_genai

import os
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_ENDPOINT"] = "https://api.smith.langchain.com"
os.environ["LANGCHAIN_API_KEY"] = "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"
os.environ["LANGCHAIN_PROJECT"] = "RAG_Chatbot"
os.environ["GOOGLE_API_KEY"]= "AIzaSyACUffhqoibk1GMmQVLwE7TCGg5KRnVsUo"

import warnings
warnings.filterwarnings("ignore")

from langchain_google_genai import GoogleGenerativeAIEmbeddings
gemini_embeddings = GoogleGenerativeAIEmbeddings(model = "models/embedding-001")

from langchain_google_genai import ChatGoogleGenerativeAI

model = ChatGoogleGenerativeAI(model="gemini-1.5-pro-001", convert_system_message_to_human=True)

print(model.invoke("hi").content)

import bs4
from langchain import hub

from langchain.chains.combine_documents import create_stuff_documents_chain

from langchain.vectorstores import Chroma

pip install langchain chromadb

pip install -U langchain-community

from langchain_community.vectorstores import Chroma

from langchain_community.document_loaders import WebBaseLoader

from langchain.document_loaders import WebBaseLoader

from langchain_core.prompts import ChatPromptTemplate

from langchain_text_splitters import RecursiveCharacterTextSplitter

from langchain_core.prompts import MessagesPlaceholder

loader = WebBaseLoader("https://lilianweng.github.io/posts/2023-06-23-agent/")

doc = loader.load()

doc

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000,chunk_overlap=200)
splits = text_splitter.split_documents(doc)

vectorstore = Chroma.from_documents(documents=splits, embedding=gemini_embeddings)

retriever = vectorstore.as_retriever()

retriever

system_prompt = ("You are an assistant for question-answering tasks"
                 "Use the following pieces of retrieved context to answer the question"
                 "If you don't know the answer, say that you don't know."
                 "Use three sentences maximum and keep the answer concise."
                 "\n\n"
                 "{Context}")

from langchain.prompts import PromptTemplate

# Define a correct prompt template
chat_prompt = PromptTemplate(
    input_variables=["context", "input"],  # Ensure 'context' is present
    template="Given the following context: {context}\n\nAnswer the question: {input}"
)

question_answering_chain = create_stuff_documents_chain(model, chat_prompt)

from langchain.chains import create_retrieval_chain

# Ensure `retriever` and `question_answering_chain` are properly initialized
rag_chain = create_retrieval_chain(retriever, question_answering_chain)

response = rag_chain.invoke({"input":"What is MRKL?"})

response["answer"]

from langchain.chains import create_history_aware_retriever

retriever_prompt = ("Given a chat history and the latest user question which might reference context in the chat history,"
"formulate a standalone question which can be understood without the chat history"
"Do NOT answer the question, just reformulate it if needed and othrewise return as it is.")

from langchain.prompts import PromptTemplate

qa_prompt = PromptTemplate(
    input_variables=["context", "input"],  # Ensure "context" is here
    template="You are a helpful assistant. Given the following context: {context}, answer the question: {input}"
)

question_answer_chain = create_stuff_documents_chain(model,qa_prompt)

rag_chain = create_retrieval_chain(retriever,question_answer_chain)

from langchain_core.messages import HumanMessage,AIMessage

chat_history = []

question1 = "What is Task Decomposition?"

message1 = rag_chain.invoke({"input":question1,"chat_history":chat_history})

message1["answer"]

chat_history.extend(
    [
        HumanMessage(content=question1),
        AIMessage(content=message1["answer"])
    ]
)

chat_history

second_question = "What are common ways of doing it?"

message2 = rag_chain.invoke({"input":second_question,"chat_history":chat_history})

print(message2["answer"])

from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory

store = {}

def get_session_history(session_id: str)->BaseChatMessageHistory:
    if session_id not in store:
        store[session_id] = ChatMessageHistory()
    return store[session_id]

from langchain.chains import ConversationalRetrievalChain

conversational_rag_chain = RunnableWithMessageHistory(rag_chain,get_session_history,input_messages_key = "input",history_messages_key = "chat_history",output_messages_key = "answer",)

conversational_rag_chain.invoke({"input":"What is Task Decomposition?"},
                                config = {
                                    "configurable":{"session_id":"abc123"}
                                },)["answer"]

for message in store["abc123"].messages:
  if isinstance(message,AIMessage):
    prefix = "AI"
  else:
    prefix = "User"
  print(f"{prefix}: {message.content}\n")

conversational_rag_chain.invoke({"input":"What is a prompt technique like step xyz?"},
                               config = {"configurable":{"session_id":"abc123"}},)["answer"]

